data.experiments=['Planck_CamSpec_NPIPE12_7_TTTEEE']
#data.over_sampling=[1, 5]

# Cosmological parameters list
data.parameters['omega_b']      = [  2.2377,   None, None,      0.015, 0.01, 'cosmo']
data.parameters['omega_cdm']    = [ 0.12010,   None, None,     0.0013,    1, 'cosmo']
# data.parameters['100*theta_s']= [ 1.04110,   None, None,    0.00030,    1, 'cosmo']
data.parameters['H0']           = [67,   20, 100,    0.1,    1, 'cosmo']
data.parameters['ln10^{10}A_s'] = [  3.0447,   None, None,      0.015,    1, 'cosmo']
data.parameters['n_s']          = [  0.9659,   None, None,     0.0042,    1, 'cosmo']
data.parameters['tau_reio']     = [  0.0543,  0.004, None,      0.008,    1, 'cosmo']

# Nuisance parameters
data.parameters['amp_100']     = [0,  0,   0,   0,      1, 'nuisance']
data.parameters['amp_143']     = [10, 0,   50,  1,      1, 'nuisance']
data.parameters['amp_217']     = [20, 0,   50,  1,      1, 'nuisance']
data.parameters['amp_143x217'] = [10, 0,   50,  1,      1, 'nuisance']
data.parameters['n_100']       = [0,  0,   0,   0,      1, 'nuisance']
data.parameters['n_143']       = [1,  0,   5,   0.2,    1, 'nuisance']
data.parameters['n_217']       = [1,  0,   5,   0.2,    1, 'nuisance']
data.parameters['n_143x217']   = [1,  0,   5,   0.2,    1, 'nuisance']
data.parameters['calTE']       = [1,  0.9, 1.1, 0.01,   1, 'nuisance']
data.parameters['calEE']       = [1,  0.9, 1.1, 0.01,   1, 'nuisance']
data.parameters['A_planck']    = [1,  0.9, 1.1, 0.0025, 1, 'nuisance']

# Derived parameters

data.parameters['z_reio']          = [1, None, None, 0,     1,   'derived']
data.parameters['Omega_Lambda']    = [1, None, None, 0,     1,   'derived']
data.parameters['YHe']             = [1, None, None, 0,     1,   'derived']
#data.parameters['H0']              = [0, None, None, 0,     1,   'derived']
data.parameters['A_s']             = [0, None, None, 0,  1e-9,   'derived']
data.parameters['sigma8']          = [0, None, None, 0,     1,   'derived']

# Other cosmo parameters (fixed parameters, precision parameters, etc.)

data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/external/bbn/sBBN_2017.dat'
# BBN file path is automatically set to match CLASS version if 'sBBN file' is requested
# You can force the code to use the exact BBN file passed above with flag
data.custom_bbn_file = True

data.cosmo_arguments['k_pivot'] = 0.05

# The base model features two massless
# and one massive neutrino with m=0.06eV.
# The settings below ensures that Neff=3.046
# and m/omega = 93.14 eV
data.cosmo_arguments['N_ur'] = 2.0328
data.cosmo_arguments['N_ncdm'] = 1
data.cosmo_arguments['m_ncdm'] = 0.06
data.cosmo_arguments['T_ncdm'] = 0.71611

# These two are required to get sigma8 as a derived parameter
# (class must compute the P(k) until sufficient k)
data.cosmo_arguments['output'] = 'mPk'
data.cosmo_arguments['P_k_max_h/Mpc'] = 1.

data.cosmo_arguments['non_linear'] = 'hmcode'
#data.cosmo_arguments['write_parameters'] = 'yes'
#------ Mcmc parameters ----

data.N=10
data.write_step=5